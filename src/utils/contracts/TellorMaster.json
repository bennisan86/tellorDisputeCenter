{
  "contractName": "TellorMaster",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[9]",
          "name": "",
          "type": "uint256[9]"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "internalType": "address[5]",
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "internalType": "uint256[51]",
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[9]\",\"name\":\"\",\"type\":\"uint256[9]\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"internalType\":\"uint256[51]\",\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount\",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library\",\"params\":{\"_newDeity\":\"the new Deity in the contract\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the\"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"tellorContract\\\")]\"},\"return\":\"address of the requested variable \"},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request\"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp\",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable\"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp\",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"}},\"title\":\"Tellor Master\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorMaster.sol\":\"TellorMaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorGetters.sol\":{\"keccak256\":\"0x5b3d34572730645b315a2bd3457a6cedfcfefc4a2acdb0865e79c7b8bf4a42e6\",\"urls\":[\"bzz-raw://3e6fb3e97d47c94c969536087f948c5f361891c0d135b47e348e54f8dc5a0351\",\"dweb:/ipfs/QmbgDDWdRVqVsXVQb9126JDpHDiw4RTRs32dZo7w3JLzAp\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorMaster.sol\":{\"keccak256\":\"0x067f075f9c8354a50c73352f6ed39349d9bd9124952ba8bb3cad14b1b80a8e1b\",\"urls\":[\"bzz-raw://84111a19a060c421a89a93101b611f30919279c29297a7b42b7f3f071f9f9683\",\"dweb:/ipfs/QmfH9wDwFiCFMYWG2ubz96ryczzZSEPoxrBEQdjtVSdmrp\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0xebf21c6c6c909fb81334a292446c82fd3c6e3f5897815ead549360e8654cd61d\",\"urls\":[\"bzz-raw://0d2e76e0d00565be0af2556be16331e6345944c40a6f7e85675bc2533bb6fa97\",\"dweb:/ipfs/Qma88zfCXug8YoQHvAB7y2yJgrSaSzYj2B2G1HqFVKwkwp\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/TellorDispute.sol\":{\"keccak256\":\"0x9c7a5fd94e5fd5c8df0cf6bb5e6294b24a5760d20d59b216311571963fd48675\",\"urls\":[\"bzz-raw://b0bf924844a46508886ac4b84c8180c955cd8b90677dddb88d5f656c0b2d8fbb\",\"dweb:/ipfs/QmNpHFvG28RFWaPLtDccK3jy5AwsC9hMLtWuE665qvrkjx\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0x7d0a6473379b8bfadc0470f04f487fdb6dcb7556ecfac933ab799f1e245f4ae8\",\"urls\":[\"bzz-raw://9b233083f6e93ef7c503d80068596edd3e367f8049571809490179c12b43dd18\",\"dweb:/ipfs/QmNQmBWNhfQwZnqX3o3qrCYPZnVMK6qQWLuBqBEVYwT6gx\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/TellorStake.sol\":{\"keccak256\":\"0x457ad1c571d2245842fa3efe1a9ce8a19779195ffd5d8f9b3d7098495a4c0547\",\"urls\":[\"bzz-raw://f54db40c393f8211a9fc2d6bac640204a63eb3f4d89504e55f90dd5bd25eaca0\",\"dweb:/ipfs/QmVccBPn26Yv4xnzsuwRXW4G6oxLUYxSoTp62fjsf7mjk9\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/TellorStorage.sol\":{\"keccak256\":\"0xc7e23a410e68731420f5241627b08c1d6832b8df9778f45aa034f10794a1d69b\",\"urls\":[\"bzz-raw://7ea5a9822b5d1165878354a6f88a3634dd4e3df6124f9e6b3c6c7239e8a5ae87\",\"dweb:/ipfs/QmV4LfVeQetG29GYagHrtzaZD1gHAMoWQydWUc9RYqbQxZ\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/TellorTransfer.sol\":{\"keccak256\":\"0x7b57bf1d643a8b7cc70de4b8fffce49fcf5d9778c1aa6af0d6db76fc05b90495\",\"urls\":[\"bzz-raw://e455de65491453d795abef3e95c75daaaa031860c2f3383c389e049109339df3\",\"dweb:/ipfs/QmXBXoYp4USTcJEexojV2yBnFTDB5674ce5uhRGdwBTxaX\"]},\"/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/libraries/Utilities.sol\":{\"keccak256\":\"0xa00f799c00f27b2909c639c11adbb274a82f7fa09b9a66c9c8f94862d9f8126f\",\"urls\":[\"bzz-raw://bb4e830aa629370b428bfcb2a22122a87c7d9165c7cdb2eb75687df4e90aed1b\",\"dweb:/ipfs/QmU79QEnPw5ifFFg5FvE6qqkEAzW1T4cjgmxGa4GS2UVqZ\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516122843803806122848339818101604052602081101561003357600080fd5b505160408051634601f1cd60e01b8152600060048201819052915173__TellorStake___________________________92634601f1cd9260248082019391829003018186803b15801561008557600080fd5b505af4158015610099573d6000803e3d6000fd5b505060408051652fb7bbb732b960d11b8152815190819003600690810182206000908152603f602081815285832080546001600160a01b031990811633908117909255655f646569747960d01b8752875196879003909501862084528282528684208054861690911790556d1d195b1b1bdc90dbdb9d1c9858dd60921b8552855194859003600e01852083529081529084902080546001600160a01b03891693168317905590825291517fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d9450908190039091019150a150612104806101806000396000f3fe6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e146109c2578063e0ae93c1146109fd578063e1eee6d614610a2d578063fc7cf0a014610b51576101e3565b8063af0b13271461088c578063b54130291461093d578063c775b54214610968578063da37994114610998576101e3565b8063999cf26c116100d1578063999cf26c14610737578063a22e407a14610770578063a7c438bc14610820578063ae0a827914610859576101e3565b8063733bdef01461065b57806377fbb663146106a75780637f6fd5d9146106d757806393fa491514610707576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461059557806363bb82ad146105bf57806369026d63146105f857806370a0823114610628576101e3565b806346eee1c4146104d357806347abd7f1146104fd5780634ee2cd7e14610532578063612c8f7f1461056b576101e3565b806319e8e03b116101b657806319e8e03b146103875780631db842f0146104225780633180f8df1461044c5780633df0777b1461048f576101e3565b80630f0b424d1461028857806311c98512146102c4578063133bee5e1461032c57806318160ddd14610372575b604080517f74656c6c6f72436f6e74726163740000000000000000000000000000000000008152815190819003600e0181206000908152603f602090815283822054601f369081018390048302850183019095528484526001600160a01b03169360609392918190840183828082843760009201829052508451949550938493509150506020840185600019f43d604051816000823e828015610284578282f35b8282fd5b34801561029457600080fd5b506102b2600480360360208110156102ab57600080fd5b5035610b66565b60408051918252519081900360200190f35b3480156102d057600080fd5b506102f4600480360360408110156102e757600080fd5b5080359060200135610b7e565b604051808260a080838360005b83811015610319578181015183820152602001610301565b5050505090500191505060405180910390f35b34801561033857600080fd5b506103566004803603602081101561034f57600080fd5b5035610b9f565b604080516001600160a01b039092168252519081900360200190f35b34801561037e57600080fd5b506102b2610bb1565b34801561039357600080fd5b5061039c610bc2565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103e55781810151838201526020016103cd565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561042e57600080fd5b506102b26004803603602081101561044557600080fd5b5035610bdc565b34801561045857600080fd5b506104766004803603602081101561046f57600080fd5b5035610bee565b6040805192835290151560208301528051918290030190f35b34801561049b57600080fd5b506104bf600480360360408110156104b257600080fd5b5080359060200135610c0a565b604080519115158252519081900360200190f35b3480156104df57600080fd5b506102b2600480360360208110156104f657600080fd5b5035610c1d565b34801561050957600080fd5b506105306004803603602081101561052057600080fd5b50356001600160a01b0316610c2f565b005b34801561053e57600080fd5b506102b26004803603604081101561055557600080fd5b506001600160a01b038135169060200135610c43565b34801561057757600080fd5b506102b26004803603602081101561058e57600080fd5b5035610cf9565b3480156105a157600080fd5b506102b2600480360360208110156105b857600080fd5b5035610d0b565b3480156105cb57600080fd5b506104bf600480360360408110156105e257600080fd5b50803590602001356001600160a01b0316610d1d565b34801561060457600080fd5b506102f46004803603604081101561061b57600080fd5b5080359060200135610da0565b34801561063457600080fd5b506102b26004803603602081101561064b57600080fd5b50356001600160a01b0316610dba565b34801561066757600080fd5b5061068e6004803603602081101561067e57600080fd5b50356001600160a01b0316610e68565b6040805192835260208301919091528051918290030190f35b3480156106b357600080fd5b506102b2600480360360408110156106ca57600080fd5b5080359060200135610e7b565b3480156106e357600080fd5b506102b2600480360360408110156106fa57600080fd5b5080359060200135610e8e565b34801561071357600080fd5b506102b26004803603604081101561072a57600080fd5b5080359060200135610ea1565b34801561074357600080fd5b506104bf6004803603604081101561075a57600080fd5b506001600160a01b038135169060200135610eb4565b34801561077c57600080fd5b50610785610f37565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156107e05781810151838201526020016107c8565b50505050905090810190601f16801561080d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561082c57600080fd5b506104bf6004803603604081101561084357600080fd5b50803590602001356001600160a01b0316610f5e565b34801561086557600080fd5b506105306004803603602081101561087c57600080fd5b50356001600160a01b0316610f71565b34801561089857600080fd5b506108b6600480360360208110156108af57600080fd5b5035610f82565b604080518a815289151560208201528815159181019190915286151560608201526001600160a01b03808716608083015285811660a0830152841660c082015260e081018361012080838360005b8381101561091c578181015183820152602001610904565b50505050905001828152602001995050505050505050505060405180910390f35b34801561094957600080fd5b50610952610fc6565b6040518151815280826106608083836020610301565b34801561097457600080fd5b506102b26004803603604081101561098b57600080fd5b5080359060200135610fd8565b3480156109a457600080fd5b506102b2600480360360208110156109bb57600080fd5b5035610feb565b3480156109ce57600080fd5b506102b2600480360360408110156109e557600080fd5b506001600160a01b0381358116916020013516610ffd565b348015610a0957600080fd5b506102b260048036036040811015610a2057600080fd5b5080359060200135611081565b348015610a3957600080fd5b50610a5760048036036020811015610a5057600080fd5b5035611094565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ab0578181015183820152602001610a98565b50505050905090810190601f168015610add5780820380516001836020036101000a031916815260200191505b5083810382528851815288516020918201918a019080838360005b83811015610b10578181015183820152602001610af8565b50505050905090810190601f168015610b3d5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b348015610b5d57600080fd5b506104766110c0565b6000610b78818363ffffffff6110d516565b92915050565b610b86612073565b610b986000848463ffffffff6110eb16565b9392505050565b6000610b78818363ffffffff61114516565b6000610bbd6000611164565b905090565b6000806060610bd160006111a8565b925092509250909192565b6000610b78818363ffffffff6112a916565b600080610c01818463ffffffff6112bf16565b91509150915091565b6000610b9881848463ffffffff61132516565b6000610b78818363ffffffff61134c16565b610c4060008263ffffffff61136516565b50565b604080517f3f48b1ff0000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b038516602483015260448201849052915173__TellorTransfer________________________91633f48b1ff916064808301926020929190829003018186803b158015610cc657600080fd5b505af4158015610cda573d6000803e3d6000fd5b505050506040513d6020811015610cf057600080fd5b50519392505050565b6000610b78818363ffffffff61149616565b6000610b78818363ffffffff6114a816565b604080517fc93299e9000000000000000000000000000000000000000000000000000000008152600060048201819052602482018590526001600160a01b0384166044830152915173__TellorGettersLibrary__________________9163c93299e9916064808301926020929190829003018186803b158015610cc657600080fd5b610da8612073565b610b986000848463ffffffff61153116565b604080517f93b182b30000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b0384166024830152915173__TellorTransfer________________________916393b182b3916044808301926020929190829003018186803b158015610e3657600080fd5b505af4158015610e4a573d6000803e3d6000fd5b505050506040513d6020811015610e6057600080fd5b505192915050565b600080610c01818463ffffffff61159516565b6000610b9881848463ffffffff6115bc16565b6000610b9881848463ffffffff6115ef16565b6000610b9881848463ffffffff61161316565b604080517facaab9e20000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b038516602483015260448201849052915173__TellorTransfer________________________9163acaab9e2916064808301926020929190829003018186803b158015610cc657600080fd5b60008060006060600080610f4b6000611637565b949b939a50919850965094509092509050565b6000610b9881848463ffffffff61183c16565b610c4060008263ffffffff61186e16565b6000806000806000806000610f95612091565b6000610fa7818b63ffffffff6119d016565b9850985098509850985098509850985098509193959799909294969850565b610fce6120b0565b610bbd6000611c99565b6000610b9881848463ffffffff611cd916565b6000610b78818363ffffffff611cfd16565b604080517fbf32006c0000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b03808616602484015284166044830152915173__TellorTransfer________________________9163bf32006c916064808301926020929190829003018186803b158015610cc657600080fd5b6000610b9881848463ffffffff611d1316565b60608060008080806110ac818863ffffffff611d3716565b949c939b5091995097509550909350915050565b6000806110cd6000611f46565b915091509091565b6000908152604291909101602052604090205490565b6110f3612073565b6000838152604885016020908152604080832085845260090190915290819020815160a08101928390529160059082845b81548152602001906001019080831161112457505050505090509392505050565b6000908152603f9190910160205260409020546001600160a01b031690565b604080517f746f74616c5f737570706c7900000000000000000000000000000000000000008152815190819003600c01902060009081528183016020522054919050565b600080606060006111b885611fc7565b6000818152604887016020818152604080842081517f746f74616c5469700000000000000000000000000000000000000000000000008152825160089181900391909101812086526004820184528286205495879052938352805460026001821615610100026000190190911604601f8101849004840285018401909252818452949550859492918391908301828280156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b50505050509050935093509350509193909250565b6000908152604991909101602052604090205490565b600081815260488301602052604081206003810154829190156113155760038101805461130991879187919060001981019081106112f957fe5b9060005260206000200154611613565b6001925092505061131e565b50600091508190505b9250929050565b60009182526048929092016020908152604080832093835260079093019052205460ff1690565b6000908152604891909101602052604090206003015490565b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f840160205220546001600160a01b0316331461141b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53656e646572206973206e6f7420646569747900000000000000000000000000604482015290519081900360640190fd5b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f90930160205290912080546001600160a01b039092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055565b60009081526040918201602052205490565b6000603282111561151a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f526571756573745120696e6465782069732061626f7665203530000000000000604482015290519081900360640190fd5b506000908152604391909101602052604090205490565b611539612073565b6000838152604885016020908152604080832085845260080190915290819020815160a08101928390529160059082845b81546001600160a01b0316815260019091019060200180831161156a57505050505090509392505050565b6001600160a01b031660009081526047919091016020526040902080546001909101549091565b600082815260488401602052604081206003018054839081106115db57fe5b906000526020600020015490509392505050565b60009182526044929092016020908152604080832093835260059093019052205490565b60009182526048929092016020908152604080832093835260069093019052205490565b8054604080517f63757272656e74526571756573744964000000000000000000000000000000008082528251918290036010908101832060009081528487016020818152868320547f646966666963756c7479000000000000000000000000000000000000000000008752875196879003600a01872084528282528784205486885288519788900386018820855283835288852054855260488b01808452898620888a528a51998a900388018a2087528585528a87205487528185528a87207f6772616e756c61726974790000000000000000000000000000000000000000008b528b519a8b9003600b018b208852600490810186528b882054998b528b519a8b90039098018a20875294845289862054865283528885207f746f74616c5469700000000000000000000000000000000000000000000000008952895198899003600801892086529095018252878420548354601f600260001961010060018516150201909216919091049081018490048402890184019099528888529398899889986060988a98899894979596909594919391929185918301828280156118205780601f106117f557610100808354040283529160200191611820565b820191906000526020600020905b81548152906001019060200180831161180357829003601f168201915b5050505050925095509550955095509550955091939550919395565b600082815260448401602090815260408083206001600160a01b038516845260060190915290205460ff169392505050565b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f840160205220546001600160a01b0316331461192457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53656e646572206973206e6f7420646569747900000000000000000000000000604482015290519081900360640190fd5b604080517f74656c6c6f72436f6e74726163740000000000000000000000000000000000008152815190819003600e0181206000908152603f850160209081529083902080546001600160a01b0386167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155825291517fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d929181900390910190a15050565b60008060008060008060006119e3612091565b50505060008681526044880160209081526040808320805460028201546003808401546004850154865161012081018089527f7265717565737449640000000000000000000000000000000000000000000000905287518082036101290190208a526005808801808b52898c2054835289517f74696d657374616d70000000000000000000000000000000000000000000000081528a519081900360099081019091208d52818c528a8d2054848d01528a517f76616c756500000000000000000000000000000000000000000000000000000081528b51908190039093019092208c52808b52898c2054838b015289517f6d696e457865637574696f6e446174650000000000000000000000000000000081528a519081900360100190208c52808b52898c2054606084015289517f6e756d6265724f66566f7465730000000000000000000000000000000000000081528a5190819003600d0190208c52808b52898c2054608084015289517f626c6f636b4e756d62657200000000000000000000000000000000000000000081528a5190819003600b0190208c52808b52898c205460a084015289517f6d696e6572536c6f74000000000000000000000000000000000000000000000081528a51908190039092019091208b52808a52888b205460c083015288517f71756f72756d0000000000000000000000000000000000000000000000000000815289519081900360060190208b52808a52888b205460e083015288517f666565000000000000000000000000000000000000000000000000000000000081528951908190039095019094208a5292909752949096205461010087810191909152600190930154919a5060ff8082169a509281048316985062010000810490921696506001600160a01b0363010000009092048216955091811693921691909295985092959850929598565b611ca16120b0565b6040805161066081019182905290600184019060339082845b815481526020019060010190808311611cba5750505050509050919050565b60009182526048929092016020908152604080832093835260059093019052205490565b6000908152604a91909101602052604090205490565b60009182526048929092016020908152604080832093835260049093019052205490565b6000818152604883016020908152604080832060028082015483517f6772616e756c61726974790000000000000000000000000000000000000000008152845190819003600b018120875260048401808752858820547f7265717565737451506f736974696f6e00000000000000000000000000000000835286519283900360100183208952818852868920547f746f74616c546970000000000000000000000000000000000000000000000000845287519384900360080184208a52918852868920548654601f6000196101006001848116159190910291909101909216979097049687018a90048a0285018a019098528584526060998a99909889988998899891978897938801969295929490918891830182828015611e9a5780601f10611e6f57610100808354040283529160200191611e9a565b820191906000526020600020905b815481529060010190602001808311611e7d57829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a945092508401905082828015611f285780601f10611efd57610100808354040283529160200191611f28565b820191906000526020600020905b815481529060010190602001808311611f0b57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b604080517f74696d654f664c6173744e657756616c756500000000000000000000000000008082528251601292819003830181206000908152858501602081815286832054835260428801815286832054948452865193849003909501909220815292529181205490918291611fbd918591611613565b9360019350915050565b60408051610660810191829052600091829182916120089190600187019060339082845b815481526020019060010190808311611feb575050505050612023565b60009081526043909501602052505060409092205492915050565b6020810151600160025b603381101561206d578284826033811061204357fe5b602002015111156120655783816033811061205a57fe5b602002015192508091505b60010161202d565b50915091565b6040518060a001604052806005906020820280388339509192915050565b6040518061012001604052806009906020820280388339509192915050565b604051806106600160405280603390602082028038833950919291505056fea265627a7a72315820c91adca2aa9113174b0afc915794128ec0f8246b0070983596ef8b33e1262d0c64736f6c63430005100032",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063733bdef011610102578063af0b132711610095578063dd62ed3e11610064578063dd62ed3e146109c2578063e0ae93c1146109fd578063e1eee6d614610a2d578063fc7cf0a014610b51576101e3565b8063af0b13271461088c578063b54130291461093d578063c775b54214610968578063da37994114610998576101e3565b8063999cf26c116100d1578063999cf26c14610737578063a22e407a14610770578063a7c438bc14610820578063ae0a827914610859576101e3565b8063733bdef01461065b57806377fbb663146106a75780637f6fd5d9146106d757806393fa491514610707576101e3565b806346eee1c41161017a5780636173c0b8116101495780636173c0b81461059557806363bb82ad146105bf57806369026d63146105f857806370a0823114610628576101e3565b806346eee1c4146104d357806347abd7f1146104fd5780634ee2cd7e14610532578063612c8f7f1461056b576101e3565b806319e8e03b116101b657806319e8e03b146103875780631db842f0146104225780633180f8df1461044c5780633df0777b1461048f576101e3565b80630f0b424d1461028857806311c98512146102c4578063133bee5e1461032c57806318160ddd14610372575b604080517f74656c6c6f72436f6e74726163740000000000000000000000000000000000008152815190819003600e0181206000908152603f602090815283822054601f369081018390048302850183019095528484526001600160a01b03169360609392918190840183828082843760009201829052508451949550938493509150506020840185600019f43d604051816000823e828015610284578282f35b8282fd5b34801561029457600080fd5b506102b2600480360360208110156102ab57600080fd5b5035610b66565b60408051918252519081900360200190f35b3480156102d057600080fd5b506102f4600480360360408110156102e757600080fd5b5080359060200135610b7e565b604051808260a080838360005b83811015610319578181015183820152602001610301565b5050505090500191505060405180910390f35b34801561033857600080fd5b506103566004803603602081101561034f57600080fd5b5035610b9f565b604080516001600160a01b039092168252519081900360200190f35b34801561037e57600080fd5b506102b2610bb1565b34801561039357600080fd5b5061039c610bc2565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156103e55781810151838201526020016103cd565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561042e57600080fd5b506102b26004803603602081101561044557600080fd5b5035610bdc565b34801561045857600080fd5b506104766004803603602081101561046f57600080fd5b5035610bee565b6040805192835290151560208301528051918290030190f35b34801561049b57600080fd5b506104bf600480360360408110156104b257600080fd5b5080359060200135610c0a565b604080519115158252519081900360200190f35b3480156104df57600080fd5b506102b2600480360360208110156104f657600080fd5b5035610c1d565b34801561050957600080fd5b506105306004803603602081101561052057600080fd5b50356001600160a01b0316610c2f565b005b34801561053e57600080fd5b506102b26004803603604081101561055557600080fd5b506001600160a01b038135169060200135610c43565b34801561057757600080fd5b506102b26004803603602081101561058e57600080fd5b5035610cf9565b3480156105a157600080fd5b506102b2600480360360208110156105b857600080fd5b5035610d0b565b3480156105cb57600080fd5b506104bf600480360360408110156105e257600080fd5b50803590602001356001600160a01b0316610d1d565b34801561060457600080fd5b506102f46004803603604081101561061b57600080fd5b5080359060200135610da0565b34801561063457600080fd5b506102b26004803603602081101561064b57600080fd5b50356001600160a01b0316610dba565b34801561066757600080fd5b5061068e6004803603602081101561067e57600080fd5b50356001600160a01b0316610e68565b6040805192835260208301919091528051918290030190f35b3480156106b357600080fd5b506102b2600480360360408110156106ca57600080fd5b5080359060200135610e7b565b3480156106e357600080fd5b506102b2600480360360408110156106fa57600080fd5b5080359060200135610e8e565b34801561071357600080fd5b506102b26004803603604081101561072a57600080fd5b5080359060200135610ea1565b34801561074357600080fd5b506104bf6004803603604081101561075a57600080fd5b506001600160a01b038135169060200135610eb4565b34801561077c57600080fd5b50610785610f37565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156107e05781810151838201526020016107c8565b50505050905090810190601f16801561080d5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561082c57600080fd5b506104bf6004803603604081101561084357600080fd5b50803590602001356001600160a01b0316610f5e565b34801561086557600080fd5b506105306004803603602081101561087c57600080fd5b50356001600160a01b0316610f71565b34801561089857600080fd5b506108b6600480360360208110156108af57600080fd5b5035610f82565b604080518a815289151560208201528815159181019190915286151560608201526001600160a01b03808716608083015285811660a0830152841660c082015260e081018361012080838360005b8381101561091c578181015183820152602001610904565b50505050905001828152602001995050505050505050505060405180910390f35b34801561094957600080fd5b50610952610fc6565b6040518151815280826106608083836020610301565b34801561097457600080fd5b506102b26004803603604081101561098b57600080fd5b5080359060200135610fd8565b3480156109a457600080fd5b506102b2600480360360208110156109bb57600080fd5b5035610feb565b3480156109ce57600080fd5b506102b2600480360360408110156109e557600080fd5b506001600160a01b0381358116916020013516610ffd565b348015610a0957600080fd5b506102b260048036036040811015610a2057600080fd5b5080359060200135611081565b348015610a3957600080fd5b50610a5760048036036020811015610a5057600080fd5b5035611094565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b83811015610ab0578181015183820152602001610a98565b50505050905090810190601f168015610add5780820380516001836020036101000a031916815260200191505b5083810382528851815288516020918201918a019080838360005b83811015610b10578181015183820152602001610af8565b50505050905090810190601f168015610b3d5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b348015610b5d57600080fd5b506104766110c0565b6000610b78818363ffffffff6110d516565b92915050565b610b86612073565b610b986000848463ffffffff6110eb16565b9392505050565b6000610b78818363ffffffff61114516565b6000610bbd6000611164565b905090565b6000806060610bd160006111a8565b925092509250909192565b6000610b78818363ffffffff6112a916565b600080610c01818463ffffffff6112bf16565b91509150915091565b6000610b9881848463ffffffff61132516565b6000610b78818363ffffffff61134c16565b610c4060008263ffffffff61136516565b50565b604080517f3f48b1ff0000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b038516602483015260448201849052915173__TellorTransfer________________________91633f48b1ff916064808301926020929190829003018186803b158015610cc657600080fd5b505af4158015610cda573d6000803e3d6000fd5b505050506040513d6020811015610cf057600080fd5b50519392505050565b6000610b78818363ffffffff61149616565b6000610b78818363ffffffff6114a816565b604080517fc93299e9000000000000000000000000000000000000000000000000000000008152600060048201819052602482018590526001600160a01b0384166044830152915173__TellorGettersLibrary__________________9163c93299e9916064808301926020929190829003018186803b158015610cc657600080fd5b610da8612073565b610b986000848463ffffffff61153116565b604080517f93b182b30000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b0384166024830152915173__TellorTransfer________________________916393b182b3916044808301926020929190829003018186803b158015610e3657600080fd5b505af4158015610e4a573d6000803e3d6000fd5b505050506040513d6020811015610e6057600080fd5b505192915050565b600080610c01818463ffffffff61159516565b6000610b9881848463ffffffff6115bc16565b6000610b9881848463ffffffff6115ef16565b6000610b9881848463ffffffff61161316565b604080517facaab9e20000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b038516602483015260448201849052915173__TellorTransfer________________________9163acaab9e2916064808301926020929190829003018186803b158015610cc657600080fd5b60008060006060600080610f4b6000611637565b949b939a50919850965094509092509050565b6000610b9881848463ffffffff61183c16565b610c4060008263ffffffff61186e16565b6000806000806000806000610f95612091565b6000610fa7818b63ffffffff6119d016565b9850985098509850985098509850985098509193959799909294969850565b610fce6120b0565b610bbd6000611c99565b6000610b9881848463ffffffff611cd916565b6000610b78818363ffffffff611cfd16565b604080517fbf32006c0000000000000000000000000000000000000000000000000000000081526000600482018190526001600160a01b03808616602484015284166044830152915173__TellorTransfer________________________9163bf32006c916064808301926020929190829003018186803b158015610cc657600080fd5b6000610b9881848463ffffffff611d1316565b60608060008080806110ac818863ffffffff611d3716565b949c939b5091995097509550909350915050565b6000806110cd6000611f46565b915091509091565b6000908152604291909101602052604090205490565b6110f3612073565b6000838152604885016020908152604080832085845260090190915290819020815160a08101928390529160059082845b81548152602001906001019080831161112457505050505090509392505050565b6000908152603f9190910160205260409020546001600160a01b031690565b604080517f746f74616c5f737570706c7900000000000000000000000000000000000000008152815190819003600c01902060009081528183016020522054919050565b600080606060006111b885611fc7565b6000818152604887016020818152604080842081517f746f74616c5469700000000000000000000000000000000000000000000000008152825160089181900391909101812086526004820184528286205495879052938352805460026001821615610100026000190190911604601f8101849004840285018401909252818452949550859492918391908301828280156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b50505050509050935093509350509193909250565b6000908152604991909101602052604090205490565b600081815260488301602052604081206003810154829190156113155760038101805461130991879187919060001981019081106112f957fe5b9060005260206000200154611613565b6001925092505061131e565b50600091508190505b9250929050565b60009182526048929092016020908152604080832093835260079093019052205460ff1690565b6000908152604891909101602052604090206003015490565b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f840160205220546001600160a01b0316331461141b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53656e646572206973206e6f7420646569747900000000000000000000000000604482015290519081900360640190fd5b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f90930160205290912080546001600160a01b039092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055565b60009081526040918201602052205490565b6000603282111561151a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f526571756573745120696e6465782069732061626f7665203530000000000000604482015290519081900360640190fd5b506000908152604391909101602052604090205490565b611539612073565b6000838152604885016020908152604080832085845260080190915290819020815160a08101928390529160059082845b81546001600160a01b0316815260019091019060200180831161156a57505050505090509392505050565b6001600160a01b031660009081526047919091016020526040902080546001909101549091565b600082815260488401602052604081206003018054839081106115db57fe5b906000526020600020015490509392505050565b60009182526044929092016020908152604080832093835260059093019052205490565b60009182526048929092016020908152604080832093835260069093019052205490565b8054604080517f63757272656e74526571756573744964000000000000000000000000000000008082528251918290036010908101832060009081528487016020818152868320547f646966666963756c7479000000000000000000000000000000000000000000008752875196879003600a01872084528282528784205486885288519788900386018820855283835288852054855260488b01808452898620888a528a51998a900388018a2087528585528a87205487528185528a87207f6772616e756c61726974790000000000000000000000000000000000000000008b528b519a8b9003600b018b208852600490810186528b882054998b528b519a8b90039098018a20875294845289862054865283528885207f746f74616c5469700000000000000000000000000000000000000000000000008952895198899003600801892086529095018252878420548354601f600260001961010060018516150201909216919091049081018490048402890184019099528888529398899889986060988a98899894979596909594919391929185918301828280156118205780601f106117f557610100808354040283529160200191611820565b820191906000526020600020905b81548152906001019060200180831161180357829003601f168201915b5050505050925095509550955095509550955091939550919395565b600082815260448401602090815260408083206001600160a01b038516845260060190915290205460ff169392505050565b604080517f5f64656974790000000000000000000000000000000000000000000000000000815281519081900360060190206000908152603f840160205220546001600160a01b0316331461192457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f53656e646572206973206e6f7420646569747900000000000000000000000000604482015290519081900360640190fd5b604080517f74656c6c6f72436f6e74726163740000000000000000000000000000000000008152815190819003600e0181206000908152603f850160209081529083902080546001600160a01b0386167fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155825291517fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d929181900390910190a15050565b60008060008060008060006119e3612091565b50505060008681526044880160209081526040808320805460028201546003808401546004850154865161012081018089527f7265717565737449640000000000000000000000000000000000000000000000905287518082036101290190208a526005808801808b52898c2054835289517f74696d657374616d70000000000000000000000000000000000000000000000081528a519081900360099081019091208d52818c528a8d2054848d01528a517f76616c756500000000000000000000000000000000000000000000000000000081528b51908190039093019092208c52808b52898c2054838b015289517f6d696e457865637574696f6e446174650000000000000000000000000000000081528a519081900360100190208c52808b52898c2054606084015289517f6e756d6265724f66566f7465730000000000000000000000000000000000000081528a5190819003600d0190208c52808b52898c2054608084015289517f626c6f636b4e756d62657200000000000000000000000000000000000000000081528a5190819003600b0190208c52808b52898c205460a084015289517f6d696e6572536c6f74000000000000000000000000000000000000000000000081528a51908190039092019091208b52808a52888b205460c083015288517f71756f72756d0000000000000000000000000000000000000000000000000000815289519081900360060190208b52808a52888b205460e083015288517f666565000000000000000000000000000000000000000000000000000000000081528951908190039095019094208a5292909752949096205461010087810191909152600190930154919a5060ff8082169a509281048316985062010000810490921696506001600160a01b0363010000009092048216955091811693921691909295985092959850929598565b611ca16120b0565b6040805161066081019182905290600184019060339082845b815481526020019060010190808311611cba5750505050509050919050565b60009182526048929092016020908152604080832093835260059093019052205490565b6000908152604a91909101602052604090205490565b60009182526048929092016020908152604080832093835260049093019052205490565b6000818152604883016020908152604080832060028082015483517f6772616e756c61726974790000000000000000000000000000000000000000008152845190819003600b018120875260048401808752858820547f7265717565737451506f736974696f6e00000000000000000000000000000000835286519283900360100183208952818852868920547f746f74616c546970000000000000000000000000000000000000000000000000845287519384900360080184208a52918852868920548654601f6000196101006001848116159190910291909101909216979097049687018a90048a0285018a019098528584526060998a99909889988998899891978897938801969295929490918891830182828015611e9a5780601f10611e6f57610100808354040283529160200191611e9a565b820191906000526020600020905b815481529060010190602001808311611e7d57829003601f168201915b5050885460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959b508a945092508401905082828015611f285780601f10611efd57610100808354040283529160200191611f28565b820191906000526020600020905b815481529060010190602001808311611f0b57829003601f168201915b50505050509450965096509650965096509650509295509295509295565b604080517f74696d654f664c6173744e657756616c756500000000000000000000000000008082528251601292819003830181206000908152858501602081815286832054835260428801815286832054948452865193849003909501909220815292529181205490918291611fbd918591611613565b9360019350915050565b60408051610660810191829052600091829182916120089190600187019060339082845b815481526020019060010190808311611feb575050505050612023565b60009081526043909501602052505060409092205492915050565b6020810151600160025b603381101561206d578284826033811061204357fe5b602002015111156120655783816033811061205a57fe5b602002015192508091505b60010161202d565b50915091565b6040518060a001604052806005906020820280388339509192915050565b6040518061012001604052806009906020820280388339509192915050565b604051806106600160405280603390602082028038833950919291505056fea265627a7a72315820c91adca2aa9113174b0afc915794128ec0f8246b0070983596ef8b33e1262d0c64736f6c63430005100032",
  "sourceMap": "324:2205:3:-;;;706:321;8:9:-1;5:2;;;30:1;27;20:12;5:2;706:321:3;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;706:321:3;760:13;;;-1:-1:-1;;;760:13:3;;:6;:13;;;;;;;;:11;;;;:13;;;;;;;;;;;:11;:13;;;5:2:-1;;;;30:1;27;20:12;5:2;760:13:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;802:19:3;;;-1:-1:-1;;;802:19:3;;;;;;;;;;;;;;783:6;:39;;;:18;:39;;;;;;;:52;;-1:-1:-1;;;;;;783:52:3;;;825:10;783:52;;;;;;-1:-1:-1;;;864:19:3;;;;;;;;;;;;;845:39;;;;;;;;:52;;;;;;;;;-1:-1:-1;;;926:27:3;;;;;;;;;;;;907:47;;;;;;;;;:65;;-1:-1:-1;;;;;907:65:3;;;;;;;;987:33;;;;;;;-1:-1:-1;987:33:3;;;;;;;;-1:-1:-1;987:33:3;706:321;324:2205;;;;;;",
  "deployedSourceMap": "324:2205:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1844:27;;;;;;;;;;;;;;;;1810:12;1825:47;;;:18;:47;;;;;;;;1882:33;1907:8;1882:33;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1825:47:3;;1882:22;;1844:27;1810:12;1907:8;;1882:33;;1810:12;1907:8;;1810:12;1882:33;1::-1;99:1;81:16;;74:27;;;-1:-1;2011:16:3;;1882:33;;-1:-1:-1;99:1;;;-1:-1;2011:16:3;-1:-1:-1;;2004:4:3;1989:20;;1983:4;-1:-1:-1;;1962:72:3;2059:14;2103:4;2097:11;2144:4;2141:1;2136:3;2121:28;2342:6;2365:64;;;;2488:4;2483:3;2476:17;2365:64;2406:4;2401:3;2394:17;8514:151:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8514:151:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8514:151:2;;:::i;:::-;;;;;;;;;;;;;;;;11235:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11235:197:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11235:197:2;;;;;;;:::i;:::-;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11235:197:2;;;;;;;;;;;;;;;;3385:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3385:123:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3385:123:2;;:::i;:::-;;;;-1:-1:-1;;;;;3385:123:2;;;;;;;;;;;;;;13806:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13806:99:2;;;:::i;12758:137::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12758:137:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;12758:137:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8881:147;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8881:147:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8881:147:2;;:::i;6511:149::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6511:149:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6511:149:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;13166:156;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13166:156:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13166:156:2;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;7880:159;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7880:159:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7880:159:2;;:::i;1229:95:3:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1229:95:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1229:95:3;-1:-1:-1;;;;;1229:95:3;;:::i;:::-;;2052:153:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2052:153:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2052:153:2;;;;;;;;:::i;12408:113::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12408:113:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12408:113:2;;:::i;8206:151::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8206:151:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8206:151:2;;:::i;2510:140::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2510:140:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2510:140:2;;;;;;-1:-1:-1;;;;;2510:140:2;;:::i;7308:211::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7308:211:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7308:211:2;;;;;;;:::i;1666:113::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1666:113:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1666:113:2;-1:-1:-1;;;;;1666:113:2;;:::i;10813:134::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10813:134:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10813:134:2;-1:-1:-1;;;;;10813:134:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11650:191;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11650:191:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11650:191:2;;;;;;;:::i;5782:163::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5782:163:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5782:163:2;;;;;;;:::i;13536:161::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13536:161:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13536:161:2;;;;;;;:::i;1318:146::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1318:146:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1318:146:2;;;;;;;;:::i;4786:166::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4786:166:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4786:166:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2845:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2845:144:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2845:144:2;;;;;;-1:-1:-1;;;;;2845:144:2;;:::i;1513:125:3:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1513:125:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1513:125:3;-1:-1:-1;;;;;1513:125:3;;:::i;4266:237:2:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4266:237:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4266:237:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4266:237:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4266:237:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9133:108;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9133:108:2;;;:::i;:::-;;;84:18:-1;;64:39;;9133:108:2;;;;;;52:2:-1;8:100;;6894:169:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6894:169:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6894:169:2;;;;;;;:::i;5148:145::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5148:145:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5148:145:2;;:::i;926:141::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;926:141:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;926:141:2;;;;;;;;;;:::i;9807:163::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9807:163:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9807:163:2;;;;;;;:::i;10383:190::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10383:190:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10383:190:2;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10383:190:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10383:190:2;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10383:190:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6156:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6156:113:2;;;:::i;8514:151::-;8590:7;8616:42;8590:7;8647:10;8616:42;:30;:42;:::i;:::-;8609:49;8514:151;-1:-1:-1;;8514:151:2:o;11235:197::-;11333:17;;:::i;:::-;11369:56;:6;11402:10;11414;11369:56;:32;:56;:::i;:::-;11362:63;11235:197;-1:-1:-1;;;11235:197:2:o;3385:123::-;3447:7;3473:28;3447:7;3495:5;3473:28;:21;:28;:::i;13806:99::-;13852:7;13878:20;:6;:18;:20::i;:::-;13871:27;;13806:99;:::o;12758:137::-;12811:7;12820;12829:13;12861:27;:6;:25;:27::i;:::-;12854:34;;;;;;12758:137;;;:::o;8881:147::-;8955:7;8981:40;8955:7;9012:8;8981:40;:30;:40;:::i;6511:149::-;6583:7;;6615:38;6583:7;6642:10;6615:38;:26;:38;:::i;:::-;6608:45;;;;6511:149;;;:::o;13166:156::-;13250:4;13273:42;13250:4;13292:10;13304;13273:42;:18;:42;:::i;7880:159::-;7960:7;7986:46;7960:7;8021:10;7986:46;:34;:46;:::i;1229:95:3:-;1288:29;:6;1307:9;1288:29;:18;:29;:::i;:::-;1229:95;:::o;2052:153:2:-;2159:39;;;;;;2133:7;2159:39;;;;;;-1:-1:-1;;;;;2159:39:2;;;;;;;;;;;;;;:18;;;;:39;;;;;;;;;;;;;;:18;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;2159:39:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2159:39:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2159:39:2;;2052:153;-1:-1:-1;;;2052:153:2:o;12408:113::-;12464:7;12490:24;12464:7;12508:5;12490:24;:17;:24;:::i;8206:151::-;8282:7;8308:42;8282:7;8343:6;8308:42;:34;:42;:::i;2510:140::-;2609:34;;;;;;2586:4;2609:34;;;;;;;;;;;;-1:-1:-1;;;;;2609:34:2;;;;;;;;:14;;;;:34;;;;;;;;;;;;;;:14;:34;;;5:2:-1;;;;30:1;27;20:12;7308:211:2;7413:17;;:::i;:::-;7449:63;:6;7489:10;7501;7449:63;:39;:63;:::i;1666:113::-;1749:23;;;;;;1723:7;1749:23;;;;;;-1:-1:-1;;;;;1749:23:2;;;;;;;;:16;;;;:23;;;;;;;;;;;;;;:16;:23;;;5:2:-1;;;;30:1;27;20:12;5:2;1749:23:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1749:23:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1749:23:2;;1666:113;-1:-1:-1;;1666:113:2:o;10813:134::-;10876:7;;10911:29;10876:7;10932;10911:29;:20;:29;:::i;11650:191::-;11750:7;11776:58;11750:7;11815:10;11827:6;11776:58;:38;:58;:::i;5782:163::-;5868:7;5894:44;5868:7;5920:10;5932:5;5894:44;:25;:44;:::i;13536:161::-;13621:7;13647:43;13621:7;13667:10;13679;13647:43;:19;:43;:::i;1318:146::-;1420:37;;;;;;1397:4;1420:37;;;;;;-1:-1:-1;;;;;1420:37:2;;;;;;;;;;;;;;:21;;;;:37;;;;;;;;;;;;;;:21;:37;;;5:2:-1;;;;30:1;27;20:12;4786:166:2;4840:7;4849;4858;4867:13;4882:7;4891;4917:28;:6;:26;:28::i;:::-;4910:35;;;;-1:-1:-1;4910:35:2;;-1:-1:-1;4910:35:2;-1:-1:-1;4910:35:2;-1:-1:-1;4910:35:2;;-1:-1:-1;4786:166:2;-1:-1:-1;4786:166:2:o;2845:144::-;2923:4;2946:36;2923:4;2961:10;2973:8;2946:36;:14;:36;:::i;1513:125:3:-;1587:44;:6;1615:15;1587:44;:27;:44;:::i;4266:237:2:-;4358:7;4367:4;4373;4379;4385:7;4394;4403;4412:17;;:::i;:::-;4431:6;4460:36;4431:6;4485:10;4460:36;:24;:36;:::i;:::-;4453:43;;;;;;;;;;;;;;;;;;4266:237;;;;;;;;;;;:::o;9133:108::-;9177:18;;:::i;:::-;9214:20;:6;:18;:20::i;6894:169::-;6983:7;7009:47;6983:7;7033:10;7045;7009:47;:23;:47;:::i;5148:145::-;5221:7;5247:39;5221:7;5280:5;5247:39;:32;:39;:::i;926:141::-;1027:33;;;;;;1001:7;1027:33;;;;;;-1:-1:-1;;;;;1027:33:2;;;;;;;;;;;;;;;:16;;;;:33;;;;;;;;;;;;;;:16;:33;;;5:2:-1;;;;30:1;27;20:12;9807:163:2;9893:7;9919:44;9893:7;9945:10;9957:5;9919:44;:25;:44;:::i;10383:190::-;10450:13;;10480:7;;;;10533:33;10480:7;10555:10;10533:33;:21;:33;:::i;:::-;10526:40;;;;-1:-1:-1;10526:40:2;;-1:-1:-1;10526:40:2;-1:-1:-1;10526:40:2;-1:-1:-1;10526:40:2;;-1:-1:-1;10383:190:2;-1:-1:-1;;10383:190:2:o;6156:113::-;6206:7;6215:4;6238:24;:6;:22;:24::i;:::-;6231:31;;;;6156:113;;:::o;10547:194:8:-;10671:7;10697:37;;;:25;;;;;:37;;;;;;;10547:194::o;13994:278::-;14164:17;;:::i;:::-;14204:31;;;;:19;;;:31;;;;;;;;:61;;;:49;;:61;;;;;;;14197:68;;;;;;;;;;;;14204:61;14197:68;;;;;;;;;;;;;;;;;;;;;;;;13994:278;;;;;:::o;2899:166::-;3009:7;3035:23;;;:16;;;;;:23;;;;;;-1:-1:-1;;;;;3035:23:8;;2899:166::o;17717:165::-;17835:13;17849:25;;;;;;;;;;;;;;;17809:7;17835:40;;;:13;;;:40;;;;17717:165;;;:::o;15718:387::-;15817:7;15826;15835:13;15860:20;15883:21;15899:4;15883:15;:21::i;:::-;15961:33;;;;:19;;;:33;;;;;;;;16007:21;;;;;;;;;;;;;;;;;;15961:68;;:45;;;:68;;;;;;16043:33;;;;;;;15914:184;;;;;;;;;-1:-1:-1;;15914:184:8;;;;;;;;;;;;;;;;;;;;;;;15961:33;;-1:-1:-1;15961:33:8;;;16007:21;15961:33;;15914:184;;;15961:33;15914:184;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15718:387;;;;;:::o;10953:194::-;11077:7;11103:37;;;:25;;;;;:37;;;;;;;10953:194::o;7913:462::-;8033:7;8099:31;;;:19;;;:31;;;;;8144:26;;;:33;8033:7;;8099:31;8144:38;8140:229;;8237:26;;;8264:33;;8206:97;;8219:4;;8225:10;;8237:26;-1:-1:-1;;8264:37:8;;;8237:65;;;;;;;;;;;;;;8206:12;:97::i;:::-;8305:4;8198:112;;;;;;;8140:229;-1:-1:-1;8349:1:8;;-1:-1:-1;8349:1:8;;-1:-1:-1;7913:462:8;;;;;;:::o;16905:215::-;17037:4;17060:31;;;:19;;;;;:31;;;;;;;;:53;;;:41;;;;:53;;;;;;;16905:215::o;9751:217::-;9879:7;9905:31;;;:19;;;;;:31;;;;;:49;;:56;;9751:217::o;804:256::-;936:19;;;;;;;;;;;;;;;;919:37;;;;:16;;;:37;;;;-1:-1:-1;;;;;919:37:8;960:10;919:51;911:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1021:19;;;;;;;;;;;;;;;;1004:37;;;;:16;;;;:37;;;;;:49;;-1:-1:-1;;;;;1004:49:8;;;;;;;;;;;;;804:256::o;15322:159::-;15428:7;15454:20;;;:13;;;;:20;;;;;15322:159::o;10135:255::-;10259:7;10296:2;10286:6;:12;;10278:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10346:37:8;;;;:29;;;;;:37;;;;;;;10135:255::o;9109:281::-;9286:17;;:::i;:::-;9326:31;;;;:19;;;:31;;;;;;;;:57;;;:45;;:57;;;;;;;9319:64;;;;;;;;;;;;9326:57;9319:64;;;;-1:-1:-1;;;;;9319:64:8;;;;;;;;;;;;;;;;;;;;;;9109:281;;;;;:::o;13471:235::-;-1:-1:-1;;;;;13618:27:8;13582:7;13618:27;;;:18;;;;;:27;;;;;:41;;13661:37;;;;;13618:41;;13471:235::o;14489:266::-;14661:7;14691:31;;;:19;;;:31;;;;;:49;;:57;;14741:6;;14691:57;;;;;;;;;;;;;;14684:64;;14489:266;;;;;:::o;6833:247::-;6991:7;7021:29;;;:17;;;;;:29;;;;;;;;:52;;;:45;;;;:52;;;;;6833:247::o;17359:249::-;17516:7;17546:31;;;:19;;;;;:31;;;;;;;;:55;;;:43;;;;:55;;;;;17359:249::o;5271:689::-;5490:21;;5525:13;5539:29;;;;;;;;;;;;;;;;;;5395:7;5525:44;;;:13;;;:44;;;;;;;;5597:23;;;;;;;;;;;;;5583:38;;;;;;;;;5669:29;;;;;;;;;;;;;5655:44;;;;;;;;;5635:65;;:19;;;:65;;;;;;5760:29;;;;;;;;;;;;;5746:44;;;;;;;;;5726:65;;;;;;;;5804:24;;;;;;;;;;;;;5726:103;;:77;;;;:103;;;;;;5877:29;;;;;;;;;;;;;;5863:44;;;;;;;;;5843:65;;;;;;;5921:21;;;;;;;;;;;;;5843:100;;:77;;;:100;;;;;;5469:484;;;;-1:-1:-1;;5469:484:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5395:7;;;;;;5422:13;;5395:7;;;;5490:21;;5525:44;;5583:38;;5635:65;5726:103;;5843:100;;5921:21;5635:65;;5469:484;;5635:65;5469:484;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5271:689;;;;;;;:::o;2319:201::-;2445:4;2468:29;;;:17;;;:29;;;;;;;;-1:-1:-1;;;;;2468:45:8;;;;:35;;:45;;;;;;;;2319:201;;;;;:::o;1258:333::-;1405:19;;;;;;;;;;;;;;;;1388:37;;;;:16;;;:37;;;;-1:-1:-1;;;;;1388:37:8;1429:10;1388:51;1380:83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1490:27;;;;;;;;;;;;;;;;1473:45;;;;:16;;;:45;;;;;;;;:63;;-1:-1:-1;;;;;1473:63:8;;;;;;;;;;;1551:33;;;;;;;;;;;;;;;1258:333;;:::o;3823:1165::-;3965:7;3974:4;3980;3986;3992:7;4001;4010;4019:17;;:::i;:::-;-1:-1:-1;;;4038:6:8;4097:29;;;:17;;;:29;;;;;;;;4157:9;;4180:13;;;;4272:18;4304:19;;;;4337:24;;;;4136:845;;;;;;;;4414:22;;;;;;;;;;;;4393:44;;:20;;;;:44;;;;;;;4136:845;;4476:22;;;;;;;;;;;4414;4476;;;;;;4455:44;;;;;;;;;4136:845;;;;4538:18;;;;;;;;;;;;;;;;;4517:40;;;;;;;;;4136:845;;;;4596:29;;;;;;;;;;;;;;;4575:51;;;;;;;;;4136:845;;;;4665:26;;;;;;;;;;;;;;;4644:48;;;;;;;;;4136:845;;;;4731:24;;;;;;;;;;;;;;;4710:46;;;;;;;;;4136:845;;;;4795:22;;;;;;;;;;;;;;;;;4774:44;;;;;;;;;4136:845;;;;4857:19;;;;;;;;;;;;;;;4836:41;;;;;;;;;4136:845;;;;4916:16;;;;;;;;;;;;;;;;;4895:38;;;;;;;;;;;4180:13;4136:845;;;;;;;4180:13;4961:10;;;;4157:9;;-1:-1:-1;4180:13:8;;;;;-1:-1:-1;4207:22:8;;;;;;-1:-1:-1;4243:15:8;;;;;;;-1:-1:-1;;;;;;4272:18:8;;;;;;;-1:-1:-1;4304:19:8;;;;4337:24;;;4136:845;3823:1165;;;;;;;;;;;:::o;11252:149::-;11344:18;;:::i;:::-;11374:20;;;;;;;;;;;11381:13;;;;11374:20;;11381:13;11374:20;;;;;;;;;;;;;;;;;;;;;;;;11252:149;;;:::o;8609:255::-;8770:7;8800:31;;;:19;;;;;:31;;;;;;;;:57;;;:45;;;;:57;;;;;8609:255::o;6156:188::-;6277:7;6303:34;;;:27;;;;;:34;;;;;;;6156:188::o;11967:245::-;12125:7;12155:31;;;:19;;;;;:31;;;;;;;;:50;;;:43;;;;:50;;;;;11967:245::o;12625:606::-;12794:7;12885:31;;;:19;;;:31;;;;;;;;13014:18;;;;;13067:24;;;;;;;;;;;;;;;13046:46;;:20;;;:46;;;;;;;13127:29;;;;;;;;;;;;;13106:51;;;;;;;;;13192:21;;;;;;;;;;;;;13171:43;;;;;;;;;12926:298;;;-1:-1:-1;;12926:298:8;12981:19;12926:298;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12764:13;;;;12794:7;;;;;;;;12885:31;;;;12981:19;;;;13014:18;;13046:46;;13192:21;;12885:31;;12926:298;;12885:31;12926:298;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12926:298:8;;;;;;;;;;;;;-1:-1:-1;;12926:298:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12926:298:8;;-1:-1:-1;12926:298:8;-1:-1:-1;12926:298:8;;;-1:-1:-1;12926:298:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12625:606;;;;;;;;:::o;7291:380::-;7511:13;7525:31;;;;;;;;;;;;;;;;;7387:7;7511:46;;;:13;;;:46;;;;;;;;7485:73;;:25;;;:73;;;;;;7590:31;;;;;;;;;;;;;;;7576:46;;;;;;;;7387:7;;;;7433:203;;7511:13;;7433:12;:203::i;:::-;7412:252;7650:4;;-1:-1:-1;7291:380:8;-1:-1:-1;;7291:380:8:o;16347:287::-;16536:31;;;;;;;;;;-1:-1:-1;;;;;;16536:31:8;;;16553:13;;;;16536:31;;16553:13;16536:31;;;;;;;;;;;;;;;;;;;;;;:16;:31::i;:::-;16590:37;;;;:29;;;;:37;;-1:-1:-1;;16590:37:8;;;;;;16347:287;-1:-1:-1;;16347:287:8:o;861:324:13:-;994:14;;;;977:1;1035;1018:161;1042:11;1038:1;:15;1018:161;;;1088:3;1078:4;1083:1;1078:7;;;;;;;;;;;:13;1074:95;;;1117:4;1122:1;1117:7;;;;;;;;;;;1111:13;;1153:1;1142:12;;1074:95;1055:3;;1018:161;;;;861:324;;;:::o;324:2205:3:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;324:2205:3;;;-1:-1:-1;;324:2205:3:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;324:2205:3;;;-1:-1:-1;;324:2205:3:o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;-1:-1;324:2205:3;;;-1:-1:-1;;324:2205:3:o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./TellorGetters.sol\";\n\n/**\n* @title Tellor Master\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\n* TellorGettersLibrary, and TellorStake\n*/\ncontract TellorMaster is TellorGetters {\n    event NewTellorAddress(address _newTellor);\n\n    /**\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n    * @param _tellorContract is the address for the tellor contract\n    */\n    constructor(address _tellorContract) public {\n        tellor.init();\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\n        tellor.addressVars[keccak256(\"tellorContract\")] = _tellorContract;\n        emit NewTellorAddress(_tellorContract);\n    }\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n    * @dev Only needs to be in library\n    * @param _newDeity the new Deity in the contract\n    */\n\n    function changeDeity(address _newDeity) external {\n        tellor.changeDeity(_newDeity);\n    }\n\n    /**\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n    * @param _tellorContract the address of the new Tellor Contract\n    */\n    function changeTellorContract(address _tellorContract) external {\n        tellor.changeTellorContract(_tellorContract);\n    }\n\n    /**\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\n    */\n    function() external payable {\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\n        bytes memory _calldata = msg.data;\n        assembly {\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result\n                case 0 {\n                    revert(ptr, size)\n                }\n                default {\n                    return(ptr, size)\n                }\n        }\n    }\n}\n",
  "sourcePath": "/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorMaster.sol",
  "ast": {
    "absolutePath": "/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [975]
    },
    "id": 976,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 877,
        "literals": ["solidity", "^", "0.5", ".0"],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 878,
        "nodeType": "ImportDirective",
        "scope": 976,
        "sourceUnit": 876,
        "src": "25:29:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 879,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 875,
              "src": "349:13:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$875",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 880,
            "nodeType": "InheritanceSpecifier",
            "src": "349:13:3"
          }
        ],
        "contractDependencies": [875],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 975,
        "linearizedBaseContracts": [975, 875],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 884,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 883,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 882,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 884,
                  "src": "392:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "392:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "391:20:3"
            },
            "src": "369:43:3"
          },
          {
            "body": {
              "id": 930,
              "nodeType": "Block",
              "src": "750:277:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 889,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "760:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 891,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6206,
                      "src": "760:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "760:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 893,
                  "nodeType": "ExpressionStatement",
                  "src": "760:13:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 894,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "783:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 899,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "783:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 900,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "812:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 896,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "802:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "802:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "783:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 901,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24496,
                        "src": "825:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 902,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "825:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "783:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 904,
                  "nodeType": "ExpressionStatement",
                  "src": "783:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 905,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "845:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 910,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "845:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 911,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 908,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "874:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 907,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "864:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "864:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "845:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 912,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24496,
                        "src": "887:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 913,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "887:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "845:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 915,
                  "nodeType": "ExpressionStatement",
                  "src": "845:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 916,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "907:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 921,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "907:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 922,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 919,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "936:16:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 918,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "926:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "926:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "907:47:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 923,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 886,
                      "src": "957:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "907:65:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 925,
                  "nodeType": "ExpressionStatement",
                  "src": "907:65:3"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 927,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 886,
                        "src": "1004:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 926,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 884,
                      "src": "987:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "987:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 929,
                  "nodeType": "EmitStatement",
                  "src": "982:38:3"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 931,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 886,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 931,
                  "src": "718:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "718:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "717:25:3"
            },
            "returnParameters": {
              "id": 888,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "750:0:3"
            },
            "scope": 975,
            "src": "706:321:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 942,
              "nodeType": "Block",
              "src": "1278:46:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 939,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 933,
                        "src": "1307:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 936,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1288:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 938,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2956,
                      "src": "1288:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 940,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1288:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 941,
                  "nodeType": "ExpressionStatement",
                  "src": "1288:29:3"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 943,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 934,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 933,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 943,
                  "src": "1250:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 932,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1250:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1249:19:3"
            },
            "returnParameters": {
              "id": 935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1278:0:3"
            },
            "scope": 975,
            "src": "1229:95:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 954,
              "nodeType": "Block",
              "src": "1577:61:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 951,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 945,
                        "src": "1615:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 948,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1587:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 950,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2991,
                      "src": "1587:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1587:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 953,
                  "nodeType": "ExpressionStatement",
                  "src": "1587:44:3"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 955,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 945,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 955,
                  "src": "1543:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 944,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1543:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1542:25:3"
            },
            "returnParameters": {
              "id": 947,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1577:0:3"
            },
            "scope": 975,
            "src": "1513:125:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 973,
              "nodeType": "Block",
              "src": "1800:727:3",
              "statements": [
                {
                  "assignments": [959],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 959,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 973,
                      "src": "1810:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 958,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1810:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 966,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 960,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1825:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 961,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6686,
                      "src": "1825:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 965,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 963,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1854:16:3",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 962,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24490,
                        "src": "1844:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1844:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1825:47:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1810:62:3"
                },
                {
                  "assignments": [968],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 968,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 973,
                      "src": "1882:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 967,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1882:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 971,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 969,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24496,
                      "src": "1907:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 970,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1907:8:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1882:33:3"
                },
                {
                  "externalReferences": [
                    {
                      "addr": {
                        "declaration": 959,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1983:4:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 968,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2017:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 968,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1993:9:3",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 972,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1925:596:3"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 974,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 956,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1780:2:3"
            },
            "returnParameters": {
              "id": 957,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1800:0:3"
            },
            "scope": 975,
            "src": "1772:755:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 976,
        "src": "324:2205:3"
      }
    ],
    "src": "0:2530:3"
  },
  "legacyAST": {
    "absolutePath": "/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [975]
    },
    "id": 976,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 877,
        "literals": ["solidity", "^", "0.5", ".0"],
        "nodeType": "PragmaDirective",
        "src": "0:23:3"
      },
      {
        "absolutePath": "/home/samkuhlmann/Documents/ody/tellor/TellorCoreV2/contracts/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 878,
        "nodeType": "ImportDirective",
        "scope": 976,
        "sourceUnit": 876,
        "src": "25:29:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 879,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 875,
              "src": "349:13:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$875",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 880,
            "nodeType": "InheritanceSpecifier",
            "src": "349:13:3"
          }
        ],
        "contractDependencies": [875],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor.\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer,\nTellorGettersLibrary, and TellorStake",
        "fullyImplemented": true,
        "id": 975,
        "linearizedBaseContracts": [975, 875],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 884,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 883,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 882,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 884,
                  "src": "392:18:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 881,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "392:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "391:20:3"
            },
            "src": "369:43:3"
          },
          {
            "body": {
              "id": 930,
              "nodeType": "Block",
              "src": "750:277:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 889,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "760:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 891,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6206,
                      "src": "760:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 892,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "760:13:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 893,
                  "nodeType": "ExpressionStatement",
                  "src": "760:13:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 894,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "783:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 899,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "783:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 900,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "812:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 896,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "802:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "802:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "783:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 901,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24496,
                        "src": "825:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 902,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "825:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "783:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 904,
                  "nodeType": "ExpressionStatement",
                  "src": "783:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 905,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "845:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 910,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "845:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 911,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 908,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "874:8:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 907,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "864:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "864:19:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "845:39:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 912,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24496,
                        "src": "887:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 913,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "887:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "845:52:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 915,
                  "nodeType": "ExpressionStatement",
                  "src": "845:52:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 924,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 916,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 406,
                          "src": "907:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 921,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 6686,
                        "src": "907:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 922,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 919,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "936:16:3",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 918,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24490,
                          "src": "926:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "926:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "907:47:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 923,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 886,
                      "src": "957:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "907:65:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 925,
                  "nodeType": "ExpressionStatement",
                  "src": "907:65:3"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 927,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 886,
                        "src": "1004:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 926,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 884,
                      "src": "987:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 928,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "987:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 929,
                  "nodeType": "EmitStatement",
                  "src": "982:38:3"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address\n@param _tellorContract is the address for the tellor contract",
            "id": 931,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 886,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 931,
                  "src": "718:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "718:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "717:25:3"
            },
            "returnParameters": {
              "id": 888,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "750:0:3"
            },
            "scope": 975,
            "src": "706:321:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 942,
              "nodeType": "Block",
              "src": "1278:46:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 939,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 933,
                        "src": "1307:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 936,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1288:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 938,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2956,
                      "src": "1288:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 940,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1288:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 941,
                  "nodeType": "ExpressionStatement",
                  "src": "1288:29:3"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
            "id": 943,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 934,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 933,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 943,
                  "src": "1250:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 932,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1250:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1249:19:3"
            },
            "returnParameters": {
              "id": 935,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1278:0:3"
            },
            "scope": 975,
            "src": "1229:95:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 954,
              "nodeType": "Block",
              "src": "1577:61:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 951,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 945,
                        "src": "1615:15:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 948,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1587:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 950,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2991,
                      "src": "1587:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$6736_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1587:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 953,
                  "nodeType": "ExpressionStatement",
                  "src": "1587:44:3"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _tellorContract the address of the new Tellor Contract",
            "id": 955,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 945,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 955,
                  "src": "1543:23:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 944,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1543:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1542:25:3"
            },
            "returnParameters": {
              "id": 947,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1577:0:3"
            },
            "scope": 975,
            "src": "1513:125:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 973,
              "nodeType": "Block",
              "src": "1800:727:3",
              "statements": [
                {
                  "assignments": [959],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 959,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 973,
                      "src": "1810:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 958,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1810:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 966,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 960,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 406,
                        "src": "1825:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$6736_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 961,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 6686,
                      "src": "1825:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 965,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 963,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1854:16:3",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 962,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24490,
                        "src": "1844:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1844:27:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1825:47:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1810:62:3"
                },
                {
                  "assignments": [968],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 968,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 973,
                      "src": "1882:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 967,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1882:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 971,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 969,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24496,
                      "src": "1907:3:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 970,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1907:8:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1882:33:3"
                },
                {
                  "externalReferences": [
                    {
                      "addr": {
                        "declaration": 959,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1983:4:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 968,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2017:9:3",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 968,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1993:9:3",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 972,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 { revert(ptr, size) }\n    default { return(ptr, size) }\n}",
                  "src": "1925:596:3"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored",
            "id": 974,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 956,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1780:2:3"
            },
            "returnParameters": {
              "id": 957,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1800:0:3"
            },
            "scope": 975,
            "src": "1772:755:3",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 976,
        "src": "324:2205:3"
      }
    ],
    "src": "0:2530:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-09-16T20:41:37.188Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor. The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, TellorGettersLibrary, and TellorStake",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address",
          "_user": "address"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount",
        "params": {
          "_amount": "uint of amount",
          "_user": "address"
        },
        "return": "true if the user is alloed to trade the amount specified"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified",
        "params": {
          "_user": "is the owner address used to look up the balance"
        },
        "return": "Returns the balance associated with the passed in _user"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber",
        "params": {
          "_blockNumber": "The block number when the balance is queried",
          "_user": "The address from which the balance will be retrieved"
        },
        "return": "The balance at _blockNumber"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestampOnly needs to be in library",
        "params": {
          "_newDeity": "the new Deity in the contract"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender account, the tellor contract to the Tellor master address and owner to the Tellor master owner address",
        "params": {
          "_tellorContract": "is the address for the tellor contract"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner",
        "params": {
          "_challenge": "the challenge to search for",
          "_miner": "address that you want to know if they solved the challenge"
        },
        "return": "true if the _miner address provided solved the"
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute",
        "params": {
          "_address": "to look up",
          "_disputeId": "to look up"
        },
        "return": "bool of whether or not party voted"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed. These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"tellorContract\")]"
        },
        "return": "address of the requested variable "
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables",
        "params": {
          "_disputeId": "to look up"
        },
        "return": "bytes32 hash of disputebool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request"
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
        },
        "return": "uint disputeId"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the disputeUintVars under the Dispute struct",
          "_disputeId": "is the dispute id;"
        },
        "return": "uint value for the bytes32 data submitted"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available",
        "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available",
        "params": {
          "_requestId": "being requested"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up blocknumber"
        },
        "return": "uint of the blocknumber which the dispute was mined"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "the 5 miners' addresses"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
        "params": {
          "_requestId": "the requestId to look up"
        },
        "return": "uint count of the number of values received for the requestId"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists"
        },
        "return": "uint requestId"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index",
        "params": {
          "_index": "to look up in the requestQ array"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp",
        "params": {
          "_timestamp": "to check requestId"
        },
        "return": "uint of reqeuestId"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array",
        "return": "the requestQ arrray"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the apiUintVars under the requestDetails struct",
          "_requestId": "to look up"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings",
        "params": {
          "_requestId": "to look up"
        },
        "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker",
        "params": {
          "_staker": "address of staker inquiring about"
        },
        "return": "uint current state of stakeruint startDate of staking"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestampt to look up miners for"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index",
        "params": {
          "_index": "is the value index to look up",
          "_requestID": "is the requestId to look up"
        },
        "return": "uint timestamp"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is the variables/strings used to save the data in the mapping. The variables names are commented out under the uintVars under the TellorStorageStruct struct This is an example of how data is saved into the mapping within other functions: self.uintVars[keccak256(\"stakerCount\")]"
        },
        "return": "uint of specified variable"
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp",
        "params": {
          "_requestId": "to look up",
          "_timestamp": "is the timestamp to look up miners for"
        },
        "return": "bool true if requestId/timestamp is under dispute"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp",
        "params": {
          "_requestId": "being requested",
          "_timestamp": "to retreive data/value from"
        },
        "return": "value for timestamp submitted"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens",
        "return": "uint total supply"
      }
    },
    "title": "Tellor Master"
  },
  "userdoc": {
    "methods": {}
  }
}
